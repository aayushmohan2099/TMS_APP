# Generated by Django 5.2.6 on 2025-09-12 07:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('bmmu', 'BMMU'), ('dmmu', 'DMMU'), ('smmu', 'SMMU'), ('training_partner', 'Training Partner'), ('master_trainer', 'Master Trainer'), ('admin', 'Admin')], default='bmmu', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING', 'Pending Approval'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('REJECTED', 'Rejected')], default='DRAFT', max_length=20)),
                ('centre', models.CharField(blank=True, max_length=255, null=True, verbose_name='Centre (confirmed)')),
                ('centre_proposed', models.CharField(blank=True, max_length=255, null=True, verbose_name='Centre (proposed by partner)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_batches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Batch',
                'verbose_name_plural': 'Batches',
            },
        ),
        migrations.CreateModel(
            name='Beneficiary',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('district', models.CharField(blank=True, db_index=True, max_length=150, null=True)),
                ('block', models.CharField(blank=True, max_length=150, null=True)),
                ('gram_panchayat', models.CharField(blank=True, max_length=150, null=True)),
                ('village', models.CharField(blank=True, max_length=150, null=True)),
                ('shg_lokos_code', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='SHG Lokos Code')),
                ('shg_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='SHG Name')),
                ('member_lokos_code', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='Member Lokos Code')),
                ('member_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Member Name')),
                ('designation_in_shg_vo_clf', models.CharField(blank=True, max_length=200, null=True, verbose_name='Designation in SHG/VO/CLF')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('social_category', models.CharField(blank=True, max_length=50, null=True, verbose_name='Social Category')),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('education', models.CharField(blank=True, max_length=200, null=True)),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True)),
                ('parent_or_spouse_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Father/Mother/Spouse Name')),
                ('account_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Account Number (Default)')),
                ('ifsc', models.CharField(blank=True, max_length=20, null=True, verbose_name='IFSC')),
                ('branch_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Branch Name')),
                ('bank_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Bank Name')),
                ('bank_loan_status', models.BooleanField(default=False, verbose_name='Bank Loan Status (If yes)')),
                ('mobile_no', models.CharField(blank=True, db_index=True, max_length=20, null=True, verbose_name='Mobile No.')),
                ('aadhaar_no', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Aadhaar No')),
                ('cadres_role', models.CharField(blank=True, max_length=200, null=True, verbose_name='Cadres Role')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Beneficiary',
                'verbose_name_plural': 'Beneficiaries',
                'ordering': ['id'],
                'indexes': [models.Index(fields=['mobile_no'], name='bmmu_benefi_mobile__0ea95e_idx'), models.Index(fields=['aadhaar_no'], name='bmmu_benefi_aadhaar_355231_idx')],
            },
        ),
        migrations.CreateModel(
            name='BeneficiaryBatchRegistration',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('registered_on_start', models.BooleanField(default=False, verbose_name='Registered on start (eKYC)')),
                ('ekyc_registered_on', models.DateTimeField(blank=True, null=True, verbose_name='eKYC registered on')),
                ('certificate_issued', models.BooleanField(default=False, verbose_name='Certificate issued')),
                ('attendance', models.PositiveIntegerField(blank=True, null=True, verbose_name='Attendance (days)')),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beneficiarybatchregistrations', to='bmmu.batch')),
                ('beneficiary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beneficiarybatchregistrations', to='bmmu.beneficiary')),
            ],
            options={
                'verbose_name': 'Beneficiary Batch Registration',
                'verbose_name_plural': 'Beneficiary Batch Registrations',
                'unique_together': {('beneficiary', 'batch')},
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='beneficiaries',
            field=models.ManyToManyField(blank=True, related_name='batches', through='bmmu.BeneficiaryBatchRegistration', to='bmmu.beneficiary'),
        ),
        migrations.CreateModel(
            name='MasterTrainer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200)),
                ('skills', models.TextField(blank=True, help_text="Comma-separated skills/modules. (Maps Excel 'Thematic Sector' column.)", null=True)),
                ('empanel_district', models.CharField(blank=True, max_length=255, null=True, verbose_name='Empanel District')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('social_category', models.CharField(blank=True, max_length=50, null=True, verbose_name='Social Category')),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('education', models.CharField(blank=True, max_length=200, null=True)),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True)),
                ('parent_or_spouse_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Father/Mother/Spouse Name')),
                ('bank_account_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='Account Number')),
                ('ifsc', models.CharField(blank=True, max_length=32, null=True, verbose_name='IFSC')),
                ('branch_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Branch Name')),
                ('bank_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Bank Name')),
                ('mobile_no', models.CharField(blank=True, db_index=True, max_length=20, null=True, verbose_name='Mobile No.')),
                ('aadhaar_no', models.CharField(blank=True, max_length=20, null=True, verbose_name='Aadhaar No')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='trainer_pfps/')),
                ('thematic_expert_recommendation', models.TextField(blank=True, null=True, verbose_name='Thematic Expert (SMMU) Approval/Recommendation')),
                ('success_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Success Rate (percent)')),
                ('any_other_tots', models.TextField(blank=True, null=True, verbose_name='Any other ToTs')),
                ('other_achievements', models.TextField(blank=True, null=True, verbose_name='Other Achievements')),
                ('recommended_tots_by_dmmu', models.TextField(blank=True, null=True, verbose_name='Recommended ToTs by DMMU')),
                ('success_story_publications', models.TextField(blank=True, null=True, verbose_name='Success Story Publications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Master Trainer',
                'verbose_name_plural': 'Master Trainers',
                'indexes': [models.Index(fields=['full_name'], name='bmmu_master_full_na_ef990c_idx')],
            },
        ),
        migrations.CreateModel(
            name='TrainerBatchParticipation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('participated', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainerparticipations', to='bmmu.batch')),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainerparticipations', to='bmmu.mastertrainer')),
            ],
            options={
                'verbose_name': 'Trainer Batch Participation',
                'verbose_name_plural': 'Trainer Batch Participations',
                'unique_together': {('trainer', 'batch')},
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='trainers',
            field=models.ManyToManyField(blank=True, related_name='batches', through='bmmu.TrainerBatchParticipation', to='bmmu.mastertrainer'),
        ),
        migrations.CreateModel(
            name='TrainingPartner',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('contact_person', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_mobile', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('center_location', models.CharField(blank=True, max_length=255, null=True, verbose_name='Center / Location')),
                ('photographs_submission', models.JSONField(blank=True, default=list, help_text='Summary/status of photo/PDF submissions. Actual files are in TrainingPartnerSubmission.', null=True, verbose_name='Photographs submission (summary/status)')),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Bank Name')),
                ('bank_branch', models.CharField(blank=True, max_length=255, null=True, verbose_name='Branch')),
                ('bank_ifsc', models.CharField(blank=True, max_length=32, null=True, verbose_name='IFSC / Routing')),
                ('bank_account_number', models.CharField(blank=True, max_length=64, null=True, verbose_name='Account Number')),
                ('tpm_registration_no', models.CharField(blank=True, max_length=128, null=True, verbose_name='Registration No (TPM/Org)')),
                ('targets_allocated', models.CharField(blank=True, help_text='Short summary or legacy import field. Detailed targets are in TrainingPartnerTargets.', max_length=255, null=True, verbose_name='Targets Allocated (summary)')),
                ('mou_form', models.FileField(blank=True, null=True, upload_to='partner_mous/', verbose_name='Signed MoU (PDF)')),
                ('certifications', models.FileField(blank=True, null=True, upload_to='partner_certs/')),
                ('signed_report_upload_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='Signed Report Upload (status/notes)')),
                ('signed_report_uploaded_by', models.CharField(blank=True, max_length=255, null=True, verbose_name='Signed Report Uploaded By')),
                ('signed_report_file', models.FileField(blank=True, null=True, upload_to='partner_signed_reports/', verbose_name='Signed Report (PDF/JPG)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='training_partner_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Partner',
                'verbose_name_plural': 'Training Partners',
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='partner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='batches', to='bmmu.trainingpartner'),
        ),
        migrations.CreateModel(
            name='TrainingPartnerAssignment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('theme', models.CharField(help_text='Theme name (text)', max_length=255)),
                ('block', models.CharField(help_text='Block name / identifier', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='bmmu.trainingpartner')),
            ],
            options={
                'verbose_name': 'Training Partner Assignment',
                'verbose_name_plural': 'Training Partner Assignments',
            },
        ),
        migrations.CreateModel(
            name='TrainingPartnerBatch',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('drp_payment_actual', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('assigned_on', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnerbatch', to='bmmu.batch')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnerbatch', to='bmmu.trainingpartner')),
            ],
            options={
                'verbose_name': 'Training Partner Batch',
                'verbose_name_plural': 'Training Partner Batches',
            },
        ),
        migrations.CreateModel(
            name='TrainingPartnerSubmission',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('FOODING', 'Fooding'), ('TOILET', 'Toilet'), ('CENTRE_FRONT', 'Centre (front)'), ('HOSTEL', 'Hostel'), ('ACTIVITY_HALL', 'Activity Hall'), ('OTHER', 'Other')], default='OTHER', max_length=32)),
                ('file', models.FileField(blank=True, help_text='Upload image (jpeg/png) or a PDF containing required photos.', null=True, upload_to='partner_photos_or_pdfs/')),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='bmmu.trainingpartner')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Partner Submission',
                'verbose_name_plural': 'Training Partner Submissions',
            },
        ),
        migrations.CreateModel(
            name='TrainingPartnerTargets',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('target_type', models.CharField(choices=[('DISTRICT', 'District'), ('MODULE', 'Module'), ('THEME', 'Theme')], max_length=20)),
                ('target_key', models.CharField(max_length=255, verbose_name='Target key (District/Module/Theme)')),
                ('target_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Target count')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes / rationale')),
                ('evidence_file', models.FileField(blank=True, null=True, upload_to='target_evidence/', verbose_name='Evidence (PDF/JPG)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('allocated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocated_targets', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='bmmu.trainingpartner')),
            ],
            options={
                'verbose_name': 'Training Partner Target',
                'verbose_name_plural': 'Training Partner Targets',
            },
        ),
        migrations.CreateModel(
            name='TrainingPlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('training_name', models.CharField(max_length=255, verbose_name='Training name')),
                ('theme', models.CharField(blank=True, max_length=200, null=True, verbose_name='THEME')),
                ('type_of_training', models.CharField(choices=[('RES', 'Residential'), ('NON RES', 'Non-residential'), ('OTHER', 'Other')], default='OTHER', max_length=20, verbose_name='Type of Training')),
                ('level_of_training', models.CharField(blank=True, choices=[('VILLAGE', 'Village'), ('SHG', 'SHG'), ('CLF', 'CLF'), ('BLOCK', 'Block'), ('BLOCK/DISTRICT', 'Block/District'), ('CMTC /BLOCK', 'CMTC/Block'), ('DISTRICT', 'District'), ('STATE', 'State'), ('WITHIN STATE', 'Within State'), ('OUTSIDE STATE', 'Outside State')], max_length=20, null=True, verbose_name='Level of training')),
                ('no_of_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='No of Days')),
                ('participant_selection', models.CharField(blank=True, choices=[('BMMU', 'BMMU'), ('DMMU', 'DMMU'), ('SMMU', 'SMMU')], max_length=20, null=True, verbose_name='Participant Selection Authority')),
                ('approval_status', models.CharField(blank=True, choices=[('SANCTIONED', 'Sanctioned'), ('PENDING', 'Pending'), ('DENIED', 'Denied')], max_length=20, null=True, verbose_name='Approval of Training Plan')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('theme_expert', models.ForeignKey(blank=True, help_text='(Optional legacy FK) SMMU user who is theme expert (nullable). Prefer ThemeExpertAssignment.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='theme_expert_for', to=settings.AUTH_USER_MODEL)),
                ('training_partner', models.ForeignKey(blank=True, help_text='(Optional legacy FK) Preferred / assigned training partner (nullable). Prefer TrainingPlanPartner.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='training_plans', to='bmmu.trainingpartner')),
            ],
            options={
                'verbose_name': 'Training Plan',
                'verbose_name_plural': 'Training Plans',
            },
        ),
        migrations.CreateModel(
            name='MasterTrainerExpertise',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expertise', to='bmmu.mastertrainer')),
                ('training_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_trainers', to='bmmu.trainingplan')),
            ],
            options={
                'verbose_name': 'Master Trainer Expertise',
                'verbose_name_plural': 'Master Trainer Expertises',
            },
        ),
        migrations.CreateModel(
            name='MasterTrainerCertificate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('certificate_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Certificate Number')),
                ('certificate_file', models.FileField(blank=True, help_text='Upload certificate image/PDF (jpeg, png, pdf).', null=True, upload_to='trainer_certificates/')),
                ('issued_on', models.DateField(blank=True, null=True, verbose_name='Issued on')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='bmmu.mastertrainer')),
                ('training_module', models.ForeignKey(blank=True, help_text='Link to the TrainingPlan record for which this certificate was issued (nullable).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='certificates', to='bmmu.trainingplan')),
            ],
            options={
                'verbose_name': 'Master Trainer Certificate',
                'verbose_name_plural': 'Master Trainer Certificates',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='MasterTrainerAssignment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('assigned_on', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='bmmu.mastertrainer')),
                ('training_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainer_assignments', to='bmmu.trainingplan')),
            ],
            options={
                'verbose_name': 'Master Trainer Assignment',
                'verbose_name_plural': 'Master Trainer Assignments',
            },
        ),
        migrations.AddField(
            model_name='batch',
            name='training_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='batches', to='bmmu.trainingplan'),
        ),
        migrations.CreateModel(
            name='TrainingPlanPartner',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('drp_payments', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='DRP Payments / Estimated Cost')),
                ('assigned_on', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_partners', to='bmmu.trainingpartner')),
                ('training_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_partners', to='bmmu.trainingplan')),
            ],
            options={
                'verbose_name': 'Training Plan Partner',
                'verbose_name_plural': 'Training Plan Partners',
            },
        ),
        migrations.CreateModel(
            name='EkycVerification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('verified_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('details', models.TextField(blank=True, null=True)),
                ('ekyc_file', models.FileField(blank=True, null=True, upload_to='ekyc_verifications/')),
                ('notes', models.TextField(blank=True, null=True)),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ekyc_verifications', to='bmmu.batch')),
                ('beneficiary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ekyc_verifications', to='bmmu.beneficiary')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('master_trainer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ekyc_verifications', to='bmmu.mastertrainer')),
            ],
            options={
                'verbose_name': 'eKYC Verification',
                'verbose_name_plural': 'eKYC Verifications',
                'indexes': [models.Index(fields=['beneficiary', 'master_trainer', 'batch'], name='bmmu_ekycve_benefic_8d6af2_idx')],
            },
        ),
        migrations.CreateModel(
            name='ThemeExpertAssignment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('theme_name', models.CharField(db_index=True, max_length=255, verbose_name='Theme name')),
                ('expert_contact', models.CharField(blank=True, max_length=50, null=True, verbose_name='Expert contact')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='theme_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Theme Expert Assignment',
                'verbose_name_plural': 'Theme Expert Assignments',
                'unique_together': {('theme_name', 'expert')},
            },
        ),
        migrations.AddIndex(
            model_name='trainingpartner',
            index=models.Index(fields=['name'], name='bmmu_traini_name_3e4d50_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingpartner',
            index=models.Index(fields=['center_location'], name='bmmu_traini_center__901c3c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trainingpartnerassignment',
            unique_together={('theme', 'block')},
        ),
        migrations.AlterUniqueTogether(
            name='trainingpartnerbatch',
            unique_together={('partner', 'batch')},
        ),
        migrations.AddIndex(
            model_name='trainingpartnersubmission',
            index=models.Index(fields=['partner', 'category'], name='bmmu_traini_partner_ca9ea9_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingpartnertargets',
            index=models.Index(fields=['partner', 'target_type'], name='bmmu_traini_partner_9d3694_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingplan',
            index=models.Index(fields=['training_name'], name='bmmu_traini_trainin_ebf08e_idx'),
        ),
        migrations.AddIndex(
            model_name='trainingplan',
            index=models.Index(fields=['theme'], name='bmmu_traini_theme_096e5f_idx'),
        ),
        migrations.AddIndex(
            model_name='mastertrainerexpertise',
            index=models.Index(fields=['trainer', 'training_plan'], name='bmmu_master_trainer_c298c6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mastertrainerexpertise',
            unique_together={('trainer', 'training_plan')},
        ),
        migrations.AlterUniqueTogether(
            name='mastertrainerassignment',
            unique_together={('trainer', 'training_plan')},
        ),
        migrations.AddIndex(
            model_name='batch',
            index=models.Index(fields=['partner', 'status'], name='bmmu_batch_partner_36d631_idx'),
        ),
        migrations.AddIndex(
            model_name='batch',
            index=models.Index(fields=['training_plan'], name='bmmu_batch_trainin_6c78c9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trainingplanpartner',
            unique_together={('training_plan', 'partner')},
        ),
    ]
